---
import ItemModel from '@/models/item-model'
import { ButtonText } from '@/shared'
import type { HeaderNavigationProps } from '@/types/props'

const { parentNav, showNavs }: HeaderNavigationProps = Astro.props
---

<nav>
  <ul>
    {
      parentNav?.map((nav: ItemModel) => {
        const item = new ItemModel(nav)
        const subnav = showNavs.filter((subnav: any) => subnav.parentId === item.id)

        if (subnav.length === 0) {
          return (
            <ButtonText
              button={{
                ...item.fields.nav,
                buttonPageLink: item.fields?.pageLink ?? undefined
              }}
              slug={`/${item.slug}`}
              buttonClass="block w-full py-2 pl-8 pr-4 uppercase tracking-wide text-gray-900 hover:bg-gray-100"
            >
              {item.fields.nav?.text ? item.fields.nav?.text : item.name}
            </ButtonText>
          )
        }

        return (
          <div
            class="relative"
            x-data="{ 
              flyoutMenuOpen: false,
              flyoutSubMenuOpen: null
            }"
            @click.away="flyoutMenuOpen = false; flyoutSubMenuOpen = null"
          >
            <button
              type="button"
              @click="flyoutMenuOpen = !flyoutMenuOpen; flyoutSubMenuOpen = null"
              x-state:on="Item active"
              x-state:off="Item inactive"
              class="flex w-full items-center py-2 pl-8 pr-4 uppercase tracking-wide text-gray-900 hover:bg-gray-100"
            >
              <span>{item.name}</span>

              <svg
                x-state:on="Item active"
                x-state:off="Item inactive"
                class="group-hover:text-header-caret-hover-color text-header-caret-color ml-2 h-5 w-5"
                x-bind:class="{ 'text-header-caret-color': !flyoutMenuOpen, 'scale-y-flipped': flyoutMenuOpen}"
                x-description="Heroicon name: solid/chevron-down"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  fill-rule="evenodd"
                  d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                  clip-rule="evenodd"
                />
              </svg>
            </button>

            <div
              x-description={`${item.name} flyout menu, show/hide based on flyout menu state.`}
              x-show="flyoutMenuOpen"
              x-transition:enter="transition ease-out duration-200"
              x-transition:enter-start="opacity-0 translate-y-1"
              x-transition:enter-end="opacity-100 translate-y-0"
              x-transition:leave="transition ease-in duration-150"
              x-transition:leave-start="opacity-100 translate-y-0"
              x-transition:leave-end="opacity-0 translate-y-1"
              class="block"
              style="display: none;"
            >
              <div class="relative grid">
                {subnav?.map((nav: any) => {
                  const subItem = new ItemModel(nav)
                  const subItems = showNavs.filter((data: any) => data.parentId === subItem.id)
                  const slug = `/${item.slug}/${subItem.slug}`

                  return (
                    <ButtonText
                      button={{
                        ...subItem.fields.nav,
                        buttonPageLink: subItem.fields?.pageLink ?? undefined
                      }}
                      slug={slug}
                      buttonClass="group/child-nav flex items-center hover:bg-gray-100"
                    >
                      <div class="ml-3 flex items-center gap-3 transition-all">
                        <p class="py-2 pl-8 pr-4 text-[15px] text-gray-700 group-hover/child-nav:text-black">
                          {subItem.name}
                        </p>
                      </div>
                    </ButtonText>
                  )
                })}
              </div>
            </div>
          </div>
        )
      })
    }
  </ul>
</nav>
